from colorama import Fore

#Для цвета, без колорамы
#Черный: \033[30m
#Красный: \033[31m
#Зеленый: \033[32m
#Желтый: \033[33m
#Синий: \033[34m
#Фиолетовый: \033[35m
#Голубой: \033[36m
#Белый: \033[37m

print("\033[37m--------------------------------------------")
print("\033[37m|         Российский помощник по python    |")
print("\033[37m|                                          |")
print("\033[37m|      1. функция print                    |")
print("\033[34m|      2. функция input()                  |")
print("\033[34m|      3. Что нельзя ставить в переменную. |")
print("\033[34m|      4. подсказка по знакам              |")
print("\033[34m|      5. функции                          |")
print("\033[31m|      6. обьекты                          |")
print("|      7. trunc, floor, ceil, round        |")
print("|      8. Идексы, срезы                    |")
print("|      9. Что такое метод                  |")
print("|      10. Метод upper                     |")
print("|      11. Метод lower                     |")
print("|      12. Метод title                     |")
print("|      13. Метод capitalize                |")
print("|      14. Метод swapcase")
print("\033[31m--------------------------------------------")
a = int(input("Введите число: "))
print("\033[37m")
if a == 1:
	print("""\033[37m
|---------------------------------------------------------------------------------------------------------------------------------------|
|                                                      Функция print()																    |
|---------------------------------------------------------------------------------------------------------------------------------------|
| аргумент sep в print() называется разделителем 																						|
|---------------------------------------------------------------------------------------------------------------------------------------|
| Пример:																																|
| print(1, 2, 3, 4 sep='*') -> 1*2*3*4                                                                                                  |
|---------------------------------------------------------------------------------------------------------------------------------------|
| Если вы хотите добавить дополнительный перенос строки или отменить его вовсе, заменив любым символов, просто присвойте end новое      |
| значение в виде строки.                                                                                                               |
|---------------------------------------------------------------------------------------------------------------------------------------|
| Пример:																																|
| print(1, 2, 3, end='!') #не будет переноса в конце 																					|
| print('hello') # здесь будет переноса																									|
| print(5, 6, 7) # и здесь будет переноса																								|
|---------------------------------------------------------------------------------------------------------------------------------------|
| Результат:                                                                                                                            |
| 1 2 3!hello    													                                                                    |
| 5 6 7                                                                   															    |
|---------------------------------------------------------------------------------------------------------------------------------------|
| Можно одновременно пользоваться атрибутами sep и end . Задавать им значения можно в любом порядке, главное прописать имя атрибута     |
|---------------------------------------------------------------------------------------------------------------------------------------|
| пример:  																															    |
| print(1, 2, 3, sep='!', end='?')																										|
| print('new', 'string')                                                                                                                |
| print(5, 6, 7, 8, 9, end='END', sep='@') # и здесь будет перенос                                                                      |
|---------------------------------------------------------------------------------------------------------------------------------------|
| Ответ:                                                                                                                                |
| 1!2!3?new string                                                                                                                      |
| 5@6@7@8@9END                                                                                                                          |
|---------------------------------------------------------------------------------------------------------------------------------------|
\033[37m""")


if a == 2:
	print("""\033[34m
|--------------------------------------------------------------------------------------------------------------|
|                                      Функция Input():                                                        |
|--------------------------------------------------------------------------------------------------------------|
| a = input() - если необходимо ввести строку и сохранить ее в переменную а                                    |
| a = int(input()) - если необходимо ввести целое число и сохранить его в переменную а                         |
| a = float(input()) - если необходимо ввести вещественное число и сохранить его в переменную а                |
| a,b = map(int,input().split()) - если необходимо ввести два целых числа в одну строку через пробел           | 
| a,b,c = map(float,input().split()) - если необходимо ввести три вещественных числа в одну строку через пробел|
|--------------------------------------------------------------------------------------------------------------|
\033[34m""")
if a == 3:
	print("""\033[34m
|-------------------------------------------------------------------------------------------------------------------------|
|                                 То что нельзя как переменная                                                            |
|-------------------------------------------------------------------------------------------------------------------------|
| То что НЕЛЬЗЯ ставить как перременная:                                                                                  |
| False, class, finally, is, return, None, continue, for, lambda, try, True, def, from, nonlocal, while, and, del, global,| 
| not, with, as, elif, if, or, yield, assert, else, import, pass, break, except, in, raise                                |
|-------------------------------------------------------------------------------------------------------------------------|
 \033[34m""")

if a == 4:
 	print("""\033[34m
|-----------------------------|
|      Помощь по знакам       |
|-----------------------------|
| Сложение - "+"              |
| Вычитание - '-'             |
| Умножение - '*'             |
| Деление - '/'               |
| Возведение в степень - '**' |
| Целостное деление - '//''   |
| Остаток от деления - '%'    |
|-----------------------------|
\033[34m""")

if a == 5:
	print("""\033[34m
|------------------------------------------------------------------------------------------------------------------|
|                           Функции                                                                                |
|------------------------------------------------------------------------------------------------------------------|
| функция                Результат функции                                                                         |
| abs(value)             abs(-7) -> 7, abs(7) -> 7 (находит модуль числа)                                          |
| min(x1,x2,... xn)      min(-43, 90, 832, -78) -> -78 (ПОЛУЧАЕМ САМОЕ МИНИМАЛЬНОЕ ЧИСЛО)                          |
| max(x1,x2,...xn)       max(-43, 90, 832, -78) -> 832 (ПОЛУЧАЕМ САМОЕ БОЛЬШОЕ ЧИСЛО)                              |
| pow(x, y)              pow(2, 5) -> 32 (принимает на вход 2 значения и возводит первое число в степень второго.) |
| round()                round(3,5) -> 3 (делает число целым)                                                      |
|------------------------------------------------------------------------------------------------------------------|
\033[34m""")
if a == 6:
	print('''\033[31m
|------------------------------------------------------------------------|
|                       Объекты                                          |
|------------------------------------------------------------------------|
| Типы объектов   Название типа обьекта       Пример объекта             |
|                                                                        |
| Целое число     int(от слова "integer")     43, -56, 0, 2548           |
|------------------------------------------------------------------------|
| Число с плав.   float                       1.5, -43.0, 32.5           |
| точкой                                                                 |
|------------------------------------------------------------------------|
| Строка          str(от слова "string")      'hello', "Hello"           |
| Логический      bool(от слова "boolean")     True, False               |
| тип                													 |
|------------------------------------------------------------------------|
| список          list                         [43, -54.5, True, 'hello']|
| словарь         dict(от слова "dictionary")  {'a':123, 'b':456}        |
| кортеж          tuple                        (1, 2, 3, 4, 5)           |
| множество       set                          {1,2,3,4}                 |
|  файлы           file                                                  |
|------------------------------------------------------------------------|
(Криво, косо, но пАйдёт как говорится))
\033[31m''')

if a == 7:
	print("""\033[31m
                           урок по trunc, floor, ceil, round.

1. Функция trunc - является частью модуля math. Отсекает дробную часть от числа. Фактически, проще использовать встроенную 
функцию приведения типов int, так как её подгружать через модуль не нужно.

Примеры:
from math import trunc
print(trunc(2.5)) # 2
print(trunc(3.5)) # 3
print(trunc(-2.5)) # -2

print(int(2.5)) # 2
print(int(3.5)) # 3
print(int(-2.5)) # -2

2. Функция floor - является частью модуля math. Округляет числа в сторону минус бесконечности (вниз).
Примеры:
from math import floor
print(floor(2.5)) # 2
print(floor(3.5)) # 3
print(floor(-2.5)) # -3

3. Функция ceil - является частью модуля math. Округляет числа в сторону плюс бесконечности (вверх).
Примеры:
from math import ceil
print(ceil(2.5)) # 3
print(ceil(3.5)) # 4
print(ceil(-2.5)) # -2

4. Функция round - является встроенной функцией, которую не нужно подгружать. Она похожа на "школьное округление", но у неё есть 
своя особенность:

Числа с дробной частью от 0 до 0.5 (не включая 0.5) - round округляет вниз.
print(round(5.3)) # 5
Числа с дробной частью от 0.5 (не включая 0.5) до 1 - round округляет вверх.
print(round(6.7)) # 7
Числа с дробной частью 0.5 - round округляет до ближайшего целого чётного числа.
print(round(12.5)) # 12
print(round(13.5)) # 14

П.с.: "школьное" округление (если дробная часть от 0 до 0.5 (не включая 0.5) - округление вниз, а если от 0.5 до 1 - округление 
вверх) - это Российский стандарт и в Питон его не закладывали, поэтому приходится самим его реализовывать, вот код:

from math import floor, ceil
N = float(input())
if N - int(N) < 0.5:
    print(floor(N))
else:
    print(ceil(N))

П.с.с.: Ребята, не используйте (по возможности) конструкцию "from math import *", так как при дальнейшей работе с программами 
вы будете использовать ни одну библиотеку и в разных библиотеках есть функции, которые называются одинаково, а выполняют разные 
действия! (Что вызывает немало конфликтов в работе программ) Лучше используйте from math import (Функции через запятую) и пишите 
nе функции, с которыми точно будете работать.""")

if (a == 8):
	print(""" 
Давайте разберем это на примере строки, состоящей из 11 символов hello world. У нас вначале идёт пять букв, далее идет
один пробел и еще пять букв. Всего 2 слова и 11 символов. У каждого символа в этой строке есть свой порядковый номер.
Порядок нумерации в Python начинается с 0, то есть самый левый символ \033[31mh\033[37m стоит на нулевом месте, затем буква \033[31me\033[37m стоит 
на первом и так далее по порядку. То есть последняя буква у нас стоит на десятом месте. Порядковый номер также
называется индексом и он нам нужен для того, чтобы получить значение, которое стоит на этом месте.

0 1 2 3 4 5 6 7 8 9 \033[31m10\033[37m
^ ^ ^ ^ ^ ^ ^ ^ ^ ^ \033[31m^\033[37m
| | | | | | | | | | \033[31m|\033[37m
h e l l o   w o r l \033[31md\033[37m


Создадим переменную s со значением hello world.  Когда мы обращаемся к переменной s мы получаем все символы сразу, но если вдруг нам понадобится получить только один символ, то тогда нам понадобится использовать индекс. Например, чтобы получить w мы должны будем указать команду следующим образом: мы пишем строку, в которой мы хотим это получить, затем открываем квадратные скобочки, указываем номер индекса и получаем результат.

s = \033[32m'hello world\033[37m'
s
\033[34m'hello world'\033[37m

s[6]
\033[34m'w'\033[37m

То есть обращение у вас должно быть следующим образом: вы пишете строку и в квадратных скобках вы указываете номер индекса.
Давайте попробуем получить букву \033[31md\033[37m. Вы должны будете указать в квадратных скобках индекс номер 10:

s[10]
\033[34m'd'\033[37m

То есть мы сейчас через переменную s обращаемся к индексу этой буквы, но вы также можете напрямую у самой строки обращаться к индексу. Рассмотрим вот такую строку "abcd" и мы можем взять, например, первый индекс - это будет буква b:

\033[32m'abcd'\033[37m[1]
\033[34m'b'\033[37m

Давайте с вами в переменной \033[31md\033[37m сохраним еще одну строку и запишем туда "privet". В этой строке такая же нумерация, то есть
первая буква стоит под нулевым индексом, следующая буква стоит под первым и так далее. Последняя буква будет стоять под
пятым индексом.

0 1 2 3 4 \033[31m5\033[37m 
^ ^ ^ ^ ^ \033[31m^\033[37m 
| | | | | \033[31m|\033[37m 
p r i v e \033[31mt\033[37m 

В этом примере мы с вами видим, что у всех строк можно одинаково получить первый символ - для этого нужно указать нулевой индекс, но последний символ у всех строк разный. То есть, например, в случае с переменной s - это был индекс под номером 10, а в случае с переменной d - это был индекс под номером 5.

0 1 2 3 4 \033[31m 5\033[37m   0 1 2 3 4 5 6 7 8 9 \033[31m 10\033[37m 
^ ^ ^ ^ ^ \033[31m ^\033[37m   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ \033[31m ^\033[37m 
| | | | | \033[31m |\033[37m   | | | | | | | | | | \033[31m |\033[37m 
p r i v e \033[31m t\033[37m   h e l l o   w o r l \033[31m d\033[37m 
 """)

if(a == 9):
	print(""" \033[31m
Вообще понятие метода приходит к нам из объектно-ориентированного подхода программирования(ООП). Понимаю, что на данном этапе изучения вы не знакомы с ООП, поэтому постараемся простым языком разобраться с этой темой.

Метод представляет собой просто функцию, которая связана с определенным типом объекта и применяется к конкретному значению. У каждого отдельного типа данных есть свои методы. Мы познакомились в этом разделе с таким типом данных как «строка». Вот у строк есть определенный набор методов, который можно к ним применять. Под методом вы также можете понимать специфичную способность. И вот уже скоро вы узнаете, какие «способности » есть у строк.

Чтобы воспользоваться методом вы должны будете его вызвать. Выглядит это следующим образом:

\033[37mобъект.метод(аргументы)\033[37m

\033[31mПосле метода в скобках возможна передача аргументов. Какие именно аргументы, и на что они влияют - это зависит от метода, с которым вы работаете

У строк существует очень много методов, все сразу выучить их трудно и в этом нет необходимости. Мы познакомимся с вами только с наиболее часто встречающими на практике методами. И я буду отдельно помечать те методы, которые вы как будущий разработчик знать обязаны. 
""")

if(a == 10):
	print(""" \033[31m
Метод .upper  имеет следующий шаблон вызова:

\033[37mS.upper()\033[37m

\033[31mДанный метод возвращает новую строку из строки S, превращает все буквы в заглавные. Если в строке будут присутствовать символы или цифры, то они останутся неизменными. Цифры и знаки пунктуации игнорируются.
\033[37mКод:                                         Результат
a = 'hello'.upper()                          Hello
print(a)
b = 'aSDfgh123№'.upper()                     ASDFG123№
print(b)
print('NotHinG'.upper())                     NOTHING

\033[31mНе забывайте ставить скобки после вызова метода. Python в этом случае сообщит вам о том, что такой метод существует, но он его не вызовет, т.е. функциональность этого метода не будет задействована:
\033[37'hello'.upper
<built-in method uppe of str obkect at 0x00000242DBBB74B0>
""")

if(a == 11):
	print("""\033[31m
 Метод .lower  имеет следующий шаблон вызова:
 \033[37mS.lower()
\033[31mМетод .lower является противоположным методу .upper . Данный метод возвращает новую строку из строки S, превращает все буквы в строчные(нижний регистр). Если в строке будут присутствовать символы или цифры, то они останутся неизменными.
\033[37mКод:                                               Результат
a = 'HeLLO'.lower()                                        hello
print(a)
b = 'aSDfgh123№'.lower()                                   asdfgh123№
print(b) 
""")

if(a == 12):
	print(""" \033[31m
Метод .title  имеет следующий шаблон вызова:

\033[37mS.title()

\033[31mМетод .title возвращает новую строку, в которой каждое слово исходной строки начинается с буквы в верхнем регистре, а все остальные буквы в нижнем. Цифры и знаки пунктуации игнорируются.

Код:                                            Результат
s = 'hello world'                               
print(s.title())                                Hello World  
print(s)                                        hello world
print('кАкОй чУдесНый дЕнь'.title())            Какой Чудесный День 

\033[34mДанный метод знать хорошо, но не обязательно так как он редко используется""")

if(a == 13):
	print(""" \033[31m
Метод .capitalize  имеет следующий шаблон вызова:

\033[37mS.capitalize()
\033[31m
Метод .capitalize возвращает новую строку, в которой только первый символ находится в верхнем регистре, а все остальные в нижнем. Цифры и знаки пунктуации игнорируются.

\033[37m
Код:                                                       Результат
s = 'hello world'
print(s.capitalize())                                      Hello world
print(s)                                                   hello world
print('кАкОй чУдесНый дЕнь'.capitalize())                  Какой чудесный день

\033[34mДанный метод тоже редко используется """)

if(a == 14):
	print(""" \033[31m
Метод .swapcase  имеет следующий шаблон вызова:

\033[37mS.swapcase()

\033[31m
Метод .swapcase возвращает новую строку, в которой  все заглавные буквы преобразованы в строчные, строчные – в заглавные. Цифры и знаки пунктуации игнорируются.
\033[37m
Код:                                                Результат:
s = 'hello world!123'								
print(s.swapcase()) 								HELLO WORLD!123
print(s)                                            hello world!123
print('кАкОй чУдесНый дЕнь'.swapcase())             КаКоЙ ЧуДЕСнЫЙ ДеНЬ

\033[34mДанный метод тоже используется редко
""")

#Для цвета, без колорамы
#Черный: \033[30m
#Красный: \033[31m
#Зеленый: \033[32m
#Желтый: \033[33m
#Синий: \033[34m
#Фиолетовый: \033[35m
#Голубой: \033[36m
#Белый: \033[37m